		BB_ARD_transmission_protocol
	Author:	Matthew Gruda
	Version: 0.1
	Date:	10/8/2014

Rational:
	This document describes the transmission protocol for the BeagleBone to
	 Arduino connection.  The purpose of this protocol is to efficiently
	 transfer LED matrix settings over a serial port.  

Protocol:
	Basic Structure:
		The BB generally transmits commands and data to the ARD, which
		 will generally reply with acknowledgment and confim codes. In
		 general the BB will start all contact with the ARD.
	Connection settings:
		115200 bps, 8 data bits, 0 parity bits, 1 stop bit

        A single screen buffer has (16 rows of pixels)*(32 columns of pixels)
        *(3 colors per pixel)*(8 bits per pixel) = 12288 bits of data.
        Because of this large amount of data, the highest baud rate that
        the Arduino can support, 115200 bps, is used to minimize latency,
        resulting in a maximum of (115200 bps)/(12288 bits/frame)
        = 9.375 frames per second. Note that the actual frame rate will
        end up being slower since the Arduino and Beaglebone will be performing
        other processes between each frame buffer transmition.

        If this frame rate turns out to be too slow, another option is to
        use SPI instead of UART. The fastest Arduino SPI speed is 8 MHz,
        which would result in a frame rate of (8000000 bps)/(12288 bits/frame)
        = 651 fps. In order to use the Arduino's SPI, we would need to modify
        our hardware to break out pins 17-19 of the ATmega328 chip, since the
        Nootropic board does not break these pins out for us. 

	Note:
		Abbreviations:
			TX - Transfer. Data sent over serial connection
			IMM - Immediate. Must be done as soon as previous 
				step is completed
			If # - if step number (#) is succesfully completed
			BB_ERR, ARD_ERR - any approprate error code
		It is assumed all reads are blocking on the BB
		Assume everything is unsigned, unless noted otherwise.
	INITALIZATION:
		The BB to ARD connection must be initalized by this proccess.
		Protocol:
			1	BB TX BB_INIT_ARD
			2	ARD IMM TX ARD_CONFIRM
			3	ARD will preform any initalization actions
			4	If 3: ARD TX ARD_INITED, else ARD TX ARD_ERR
	ERROR CHECK:
		BB requests any errors from the ARD.  May include error string
		Error response structure ERR_RESP
			{
				byte ERR_CODE;
				2 bytes LEN;
				char[LEN] error_description;
			}
		Protocol:
			1	BB TX BB_CHECK_ERR
			2	If ARD has errors, TX ERR_RESP, else TX
				 ARD_NO_ERR
	CLOSE:
		BB tells ARD to close, turn off matrix, etc.
		Protocol:
			1	BB TX BB_CLOSE
			2	ARD IMM TX ARD_CONFIRM
	FULL SCREEN TX:
		BB sends ARD new pixel data for the complete screen.
		Pixel struct PIX
			{
				byte EDATA, Contains "Extra" data on the pixel
					may be used for blink in the future
				byte RED,   0 is none, 0xFF is full intensity
				byte GREEN, 
				byte BLUE,
			}
		Protocol:
			1 BB TX BB_FULLSCR_TX
			2 ARD TX ARD_CONFIRM
			3 BB TX BB_TX_FSCR
			4 BB TX PIX starting from top left and going right 
				then down.
			5 BB TX BB_FSCR_END

Constants:
	Note: All constants sent by the BeagleBone will be prefixed by BB.
	 All constants sent by the Arduino will be prefixed by ARD. This 
	 document will use this convention when refering to the devices. The
	 use of these constants will be described elsewhere.
	All Constants are 8 bits
	BeagleBone Usage:
		BB_INIT_ARD 		= 0x01
		BB_CHECK_ERR 		= 0x02
		BB_CLOSE		= 0x03
		BB_FULLSCR_TX		= 0x04
		BB_TX_FSCR		= 0x05
		BB_FSCR_END		= 0x06

	Arduino usage:
		ARD_CONFIRM		= 0x01
		ARD_INITED		= 0x02
		ARD_NO_ERR		= 0x03

	Arduino Errors:
		ARD_MATRIX_FAILURE	= 0x81
		ARD_BAD_TX		= 0x82 




